{"version":3,"sources":["website_helpers/utils.cljs"],"mappings":"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","names":["website-helpers.utils/get-selected-vars","selections","p1__51602#","cljs.core/every?","cljs.core/not","cljs.core/vals","cljs.core/set","cljs.core/keys","iter__5523__auto__","s__51604","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__51606","cljs.core/chunk-buffer","i__51605","vec__51607","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__51603","cljs.core/chunk-rest","vec__51610","cljs.core/first","cljs.core/cons","cljs.core/rest","var","selected","and__5043__auto__","cljs.core/contains?","website-helpers.utils/my-md->hiccup","string","cljs.core.into","cljs.core/last","markdown-to-hiccup.core/component","markdown_to_hiccup.core.md__GT_hiccup","website-helpers.utils/parse-params","url","js/window","param-strs","clojure.string.split","clojure.string/includes?","p1__51613#","cljs.core.map","website-helpers.utils/get-url-param-selections","vars","url-params","s__51615","b__51617","i__51616","iter__51614","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.utils\n  (:require\n    [markdown-to-hiccup.core :refer [md->hiccup component]]\n    [clojure.string :refer [split includes?]]))\n\n(defn get-selected-vars\n  \"If no vars are selected, all are!\"\n  {:malli/schema [:=> [:cat [:map-of :string :boolean]]\n                  [:set :string]]}\n  [selections]\n  (if (every? #(not %) (vals selections))\n    (set (keys selections))\n    (set (for [[var selected] selections\n               :when (and (not (contains? #{\"\" nil} var))\n                          selected)]\n           var))))\n\n(defn my-md->hiccup\n  [string]\n  (into [:span] (rest (rest (last (component (md->hiccup string)))))))\n\n(my-md->hiccup \"[Slipways](https://slipways.net/)\")\n\n(my-md->hiccup   \"This includes watching videos from channels like\n  [Veritasium](https://www.youtube.com/user/1veritasium), \n  [CGP Grey](https://www.youtube.com/user/CGPGrey),\n  and [Kurzgesagt](https://www.youtube.com/user/Kurzgesagt).\")\n\n(defn parse-params\n  \"Parse URL parameters into a hashmap\"\n  []\n  (let [url (.-location js/window)\n        param-strs (-> url (split #\"\\?\") last (split #\"\\&\"))]\n    (if (includes? (str url) \"?\")\n      (into {} (map #(split % #\"=\") param-strs))\n      {})))\n\n(defn get-url-param-selections\n  {:malli/schema [:=> [:cat [:set :string]] [:map-of :string :boolean]]}\n  [vars]\n  (let [url-params (parse-params)]\n    (into {} (for [var vars]\n                [var (contains? url-params var)]))))\n"]}