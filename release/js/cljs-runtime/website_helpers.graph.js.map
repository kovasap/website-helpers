{"version":3,"sources":["website_helpers/graph.cljs"],"mappings":"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","names":["website-helpers.graph/html","hiccup","sablono.server/render-static","sablono.interpreter/interpret","website-helpers.graph/create-sim","viz-state","map__76863","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","width","height","G__76864","js/d3.forceSimulation","js/d3.forceLink","p1__76855#","js/d3.forceManyBody","js/d3.forceCenter","js/d3.forceCollide","temp__5753__auto__","s","rid3.attrs/attrs","p1__76856#","p1__76857#","p1__76858#","p1__76859#","p1__76860#","p1__76861#","p1__76862#","website-helpers.graph/create-drag","sim","js/d3.drag","event","d","_","website-helpers.graph/merge-nodes","orig","new","id","orig-map","cljs.core.into","cljs.core.map_indexed","i","n","seq__76865","cljs.core/seq","chunk__76866","count__76867","i__76868","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","old","G__76871","G__76872","x","y","vx","vy","fx","fy","p__76874","map__76875","website-helpers.graph/update-sim!","alpha-target","links","nodes","old-nodes","new-nodes","p1__76873#","G__76876","website-helpers.graph/viz","ratom","base-link","cljs.core.atom","drag","color","js/d3.scaleOrdinal","add-circle","sel","p1__76877#","p1__76878#","p1__76879#","x__4336__auto__","y__4337__auto__","G__76882","add-text","p1__76880#","rid3.core/viz","svg","map__76883","_ratom","cljs.core.swap_BANG_","cljs.core/assoc","p1__76881#","js/Math.sqrt","_event","node","js/window.open","website-helpers.graph/prechew","app-state","cljs.core.update","cljs.core/clj->js"],"sourcesContent":[";; Taken from https://gist.github.com/prook/9e5cc9144d34a991978a2fd31b4ee487\n;; and comment thread https://github.com/gadfly361/rid3/issues/10.\n;; See documentation at https://github.com/d3/d3-force\n\n(ns website-helpers.graph \n  (:require\n   [sablono.core :as sab]\n   [sablono.server :as server]\n   [goog.string :as gstring]\n   [goog.string.format]\n   [rid3.core :as rid3 :refer [rid3->]]))\n\n\n(defn html\n  \"Turns hiccup like syntax into an HTML string.\"\n  [hiccup]\n  (server/render-static (sab/html hiccup)))\n\n\n(defn create-sim\n  [viz-state]\n  (let [{:keys [width height]} @viz-state]\n    (doto (js/d3.forceSimulation)\n      (.stop)\n      (.force \"link\" (-> (js/d3.forceLink)\n                         (.strength 0.1)\n                         (.id #(.-index %))))\n      (.force \"charge\" (-> (js/d3.forceManyBody)\n                           (.strength -80)))\n      (.force \"center\" (js/d3.forceCenter (/ width 2) (/ height 2)))\n      (.force \"collide\" (js/d3.forceCollide 50))\n      (.on \"tick\" (fn []\n                    (when-let [s (:links-sel @viz-state)]\n                      (rid3-> s\n                              {:x1 #(.. % -source -x)\n                               :y1 #(.. % -source -y)\n                               :x2 #(.. % -target -x)\n                               :y2 #(.. % -target -y)}))\n                    (when-let [s (:nodes-sel @viz-state)]\n                      (rid3-> s\n                              {:transform\n                               #(str \"translate(\" (.-x %) \",\" (.-y %) \")\")\n                               :x #(.-x %)\n                               :y #(.-y %)})))))))\n\n(defn create-drag\n  [sim]\n  (-> (js/d3.drag)\n      (.on \"start\" (fn started\n                     [event d _]\n                     (when (-> event .-active zero?)\n                       (-> sim\n                           (.alphaTarget 0.3)\n                           (.restart)))\n                     (set! (.-fx d) (.-x d))\n                     (set! (.-fy d) (.-y d))))\n      (.on \"drag\" (fn dragged\n                    [event d _]\n                    (set! (.-fx d) (.-x event))\n                    (set! (.-fy d) (.-y event))))\n      (.on \"end\" (fn ended\n                   [event d _]\n                   (when (-> event .-active zero?)\n                     (-> sim\n                         (.alphaTarget 0)))\n                   (set! (.-fx d) nil)\n                   (set! (.-fy d) nil)))))\n\n(defn merge-nodes\n  [orig new id]\n  (let [orig-map (into {} (map-indexed (fn [i n] [(id n) i]) orig))]\n    (doseq [n new]\n      (when-let [old (aget orig (orig-map (id n)))]\n        (when-let [x (.-x old)] (set! (.-x n) x))\n        (when-let [y (.-y old)] (set! (.-y n) y))\n        (when-let [vx (.-vx old)] (set! (.-vx n) vx))\n        (when-let [vy (.-vy old)] (set! (.-vy n) vy))\n        (when-let [fx (.-fx old)] (set! (.-fx n) fx))\n        (when-let [fy (.-fy old)] (set! (.-fy n) fy))))\n    new))\n\n(defn update-sim! [sim alpha-target {:keys [links nodes]}]\n  (let [old-nodes (.nodes sim)\n        new-nodes (merge-nodes old-nodes nodes #(.-name %))]\n    (doto sim\n      (.nodes new-nodes)\n      (-> (.force \"link\") (.links links))\n      (.alpha alpha-target)\n      (.restart))))\n\n(defn viz\n  [ratom base-link]\n  (let [viz-state (atom {:width 1200\n                         :height 1500\n                         :hover-text-sel nil\n                         :links-sel nil\n                         :nodes-sel nil})\n        sim (create-sim viz-state)\n        drag (create-drag sim)\n        ;; See\n        ;; https://github.com/d3/d3-scale-chromatic/blob/main/README.md#api-reference\n        ;; for options.\n        ;; See https://stackoverflow.com/a/21208204 for custom schemes.\n        color (js/d3.scaleOrdinal [\"#377eb8\" \"#4daf4a\" \"#984ea3\" \"#ff7f00\"]) \n        add-circle (fn [sel]\n                     (rid3-> sel\n                             (.append \"ellipse\")\n                             {:stroke         \"#fff\"\n                              :stroke-width   1.5\n                              :rx             #(* 5 (count (.-name %)))\n                              :ry             #(max 25 (.-size %))\n                              :fill           #(color (.-group %))\n                              :fill-opacity   0.7}))\n        add-text (fn [sel]\n                   (rid3-> sel\n                           (.append \"text\")\n                           {:text-anchor \"middle\"}\n                           (.text #(.-name %))))]\n    (fn [ratom]\n      [rid3/viz\n       {:id     \"force-graph\"\n        :ratom  ratom\n        :svg    {:did-mount\n                 (fn [svg ratom]\n                   (let [{:keys [width height]} @viz-state]\n                     (rid3-> svg\n                             {:width   width\n                              :height  height\n                              :viewBox #js [0 0 width height]}))\n                   (update-sim! sim 4 @ratom))\n                 :did-update\n                 (fn [svg ratom]\n                   (update-sim! sim 0.5 @ratom))}\n        :pieces [{:kind            :elem-with-data\n                  :class           \"links\"\n                  :tag             \"line\"\n                  :prepare-dataset (fn [ratom] (:links @ratom))\n                  :did-mount\n                  (fn [sel _ratom]\n                    (swap! viz-state assoc :links-sel sel)\n                    (rid3-> sel\n                            {:stroke         \"#999\"\n                             :stroke-opacity 0.6\n                             :stroke-width   #(-> (.-value %)\n                                                  js/Math.sqrt)}))}\n                 {:kind            :elem-with-data\n                  :class           \"nodes\"\n                  :tag             \"g\"\n                  :prepare-dataset (fn [ratom] (:nodes @ratom))\n                  ; See\n                  ; https://github.com/kovasap/reddit-tree/blob/main/src/reddit_tree/graph.cljs\n                  ; for more possibilities here.\n                  :did-mount (fn [sel _ratom]\n                               (swap! viz-state assoc :nodes-sel sel)\n                               ; Based on https://stackoverflow.com/a/47401796\n                               (add-circle sel)\n                               (add-text sel)\n                               (rid3-> sel\n                                 (.on \"dblclick\"\n                                      (fn [_event node]\n                                        (js/window.open (str base-link (.-path node)))))\n                                 (.call drag)))}]}])))\n\n(defn prechew\n  [app-state]\n  (-> @app-state\n      (update :nodes clj->js)\n      (update :links clj->js)))\n"]}