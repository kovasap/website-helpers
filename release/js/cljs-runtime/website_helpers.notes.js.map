{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__60872","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","xs__6385__auto__","cljs.core/first","iterys__5519__auto__","s__60874","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__60876","cljs.core/chunk-buffer","i__60875","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60873","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__60871","note","category","website-helpers.notes/get-notes-by-directory","s__60878","s__60880","b__60882","i__60881","iter__60879","iter__60877","var_args","G__60884","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__60885","vec__60886","cljs.core.nth","_","v","s__60890","b__60892","i__60891","vec__60893","iter__60889","vec__60896","notes-map","cljs.core/contains?","G__60900","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__60901","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/get-notes-by-fn","f","cljs.core/update-vals","cljs.core/group-by","website-helpers.notes/creation-time","cljs.core/min","website-helpers.notes/timestamp->month","timestamp","js/Date","website-helpers.notes/last-modification-time","cljs.core/max","website-helpers.notes/organization-schemes","cljs.core.comp","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note->link","cur-page-note","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__60904#","cljs.core.filter","website-helpers.notes/make-nested-note-html","notes-by-category","cur-page","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__60907","b__60909","i__60908","vec__60910","iter__60906","vec__60917","subtree","p1__60905#","k","cljs.core/name","s__60914","b__60916","i__60915","iter__60913","s__60921","b__60923","i__60922","iter__60920","cljs.core/vals","clojure.string/capitalize","website-helpers.notes/overlap?","set1","set2","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/get-notes-for-categories","selected-categories","cljs.core/set","p1__60924#","clojure.set/subset?","website-helpers.notes/make-nested-note-list","organization-fn","G__60925","website-helpers.notes/set-one-to-true","ks","k-to-true","s__60927","b__60929","i__60928","iter__60926","website-helpers.notes/organization-radios","organization-scheme","s__60931","b__60933","i__60932","vec__60934","iter__60930","vec__60937","cljs.core/deref","scheme","selected","cljs.core/reset!","cljs.core/keys","website-helpers.notes/make-index-menu","reagent.core.atom","website-helpers.common-components/dropdown-check-list","website-helpers.global/category-selections","website-helpers.global/sync-category-selections!","website-helpers.global/show-unselected-nodes-in-graph?","cljs.core.swap_BANG_","website-helpers.global/graph-update-num","cljs.core/inc","cljs.core/not","selected-organization-scheme","s__60941","b__60943","i__60942","vec__60944","iter__60940","vec__60947","selected?","website-helpers.global/notes","website-helpers.utils/get-selected-vars","G__60951","website-helpers.notes/random-page","website_helpers.notes.random_page","cljs.core/rand-nth","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-url-param-selections get-selected-vars]]\n    [website-helpers.global :as global]\n    [clojure.set :refer [union difference intersection subset?]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n; ---------- Organizing Notes ----------------------------------------\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n(defn get-notes-by-directory\n  \"Returns a map of path categories (derived from directories) to all notes\n  with that category.\"\n  [notes]\n  (apply merge-with\n    (partial merge-with union)\n    {}\n    (for [note     notes\n          category (:path-categories note)]\n      {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n; Not a recursively nested grouping like some of the others\n(defn get-notes-by-fn\n  [notes f]\n  (update-vals (group-by f notes) (fn [v] {:notes v})))\n\n(defn creation-time\n  [note]\n  (apply min (:modification-unix-timestamps note)))\n\n(defn timestamp->month\n  [timestamp]\n  (.toLocaleString (js/Date. (* timestamp 1000))\n                   \"en-US\"\n                   #js {:month \"long\" :year \"numeric\"}))\n  \n\n(defn last-modification-time\n  [note]\n  (apply max (:modification-unix-timestamps note)))\n\n(def organization-schemes\n  {:directory        get-notes-by-directory\n   :most-recently-created (fn [notes]\n                            (get-notes-by-fn (sort-by creation-time notes)\n                                             (comp timestamp->month\n                                                   creation-time)))\n   :most-recently-changed (fn [notes]\n                            (get-notes-by-fn\n                              (sort-by last-modification-time notes)\n                              (comp timestamp->month last-modification-time)))\n   :category         get-notes-by-category\n   :largest-category get-notes-by-largest-category})\n\n; ------------- Constucting nested HTML list ---------------------------\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)])\n\n(defn note-to-li\n  [note cur-page-note]\n  [:li {:key (:name note)}\n   (note->link note cur-page-note)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n   \n(defn make-nested-note-html\n  [notes-by-category cur-page]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] (sort-by #(let [k (first %)]\n                                               (if (string? k) k (name k)))\n                                            notes-by-category)]\n            (if (= category :notes)\n              (into [] (for [note subtree] (note-to-li note cur-page)))\n              [[:li {:key category}\n                [:details {:id   category\n                           :open (or\n                                   ; Expand all menus for the current page.\n                                   (contains? (:categories cur-page) category)\n                                   ; Expand all menus if there are few enough\n                                   ; items\n                                   (> 5\n                                      (count (reduce concat\n                                               (vals notes-by-category)))))}\n                 [:summary [:strong (capitalize category)]]\n                 (make-nested-note-html subtree cur-page)]]])))))\n\n; -------------------------------------------------------------------------\n\n(defn overlap?\n  [set1 set2]\n  (not (empty? (intersection set1 set2))))\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (if (= 0 (count selected-categories))\n    (set notes)\n    (set (filter ; #(overlap? selected-categories (:categories %))\n           #(subset? selected-categories (:categories %))\n           notes))))\n\n(defn make-nested-note-list\n  [notes selected-categories organization-fn]\n  (make-nested-note-html\n    (organization-fn (get-notes-for-categories notes selected-categories))\n    (get-cur-page-note notes)))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.)\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn set-one-to-true\n  [ks k-to-true]\n  (assoc (into {}\n               (for [k ks]\n                 [k false]))\n    k-to-true true))\n  \n(defn organization-radios\n  [organization-scheme]\n  [:div\n   [:strong \"Organize by...\"]\n   (into [:ul {:style {:list-style-type \"none\" :padding 0 :margin 0}}]\n         (for [[scheme selected] @organization-scheme]\n           [:li {:key scheme}\n            [:input {:type      \"radio\"\n                     :name      \"organization-scheme\"\n                     :checked   selected\n                     :on-change (fn [_]\n                                  (reset! organization-scheme\n                                    (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     scheme)))}]\n            scheme]))])\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  []\n  (let [organization-scheme (r/atom (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     :most-recently-changed))]\n    (fn [] [:div\n            [:div\n             [dropdown-check-list\n              global/category-selections\n              \"Select Categories\"\n              global/sync-category-selections!]]\n            [:div\n              [:input {:type      \"checkbox\"\n                       :name      \"show-unselected-nodes-in-graph\"\n                       :checked   @global/show-unselected-nodes-in-graph?\n                       :on-change (fn [_]\n                                    (swap! global/graph-update-num inc)\n                                    (swap! global/show-unselected-nodes-in-graph?\n                                      not))}]\n              \"Show unselected pages in graph?\"]\n            [organization-radios organization-scheme]\n            (let [selected-organization-scheme\n                  (first (for [[scheme selected?] @organization-scheme\n                               :when selected?]\n                           scheme))]\n              (make-nested-note-list\n                @global/notes\n                (get-selected-vars @global/category-selections)\n                (selected-organization-scheme organization-schemes)))])))\n\n\n(defn ^:export random-page\n  ([] (random-page @global/notes))\n  ([notes]\n   (fn []\n     (let [note (rand-nth notes)]\n       [:p\n        \"Random Page: \"\n        (note->link note nil)\n        [:span {:style {:font-size \"70%\"}}]\n        \" (\"\n        (join \", \" (:categories note))\n        \")\"]))))\n"]}