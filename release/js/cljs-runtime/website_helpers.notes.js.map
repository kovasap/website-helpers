{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__4652__auto__","s__75786","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4648__auto__","s__75788","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__75790","cljs.core/chunk-buffer","i__75789","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75787","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__75785","note","category","var_args","G__75792","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__75793","vec__75794","cljs.core.nth","_","v","s__75798","b__75800","i__75799","vec__75801","iter__75797","vec__75804","notes-map","cljs.core/contains?","G__75808","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__75809","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/note-to-li","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/make-subtree","notes-by-category","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__75813","b__75815","i__75814","vec__75816","iter__75812","vec__75823","subtree","cljs.core._EQ_","s__75820","b__75822","i__75821","iter__75819","s__75827","b__75829","i__75828","iter__75826","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","cljs.core/set","p1__75830#","cljs.core.filter","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__75832","b__75834","i__75833","vec__75835","iter__75831","vec__75838","k","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__75842","b__75844","i__75843","vec__75845","iter__75841","vec__75848","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__9749__auto__","cljs.core/List","result__9750__auto__","cljs.test/report","t__9800__auto__","e75851","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/get-category-selections","reagent.core.atom","website-helpers.utils/get-url-param-selections","cljs.core/keys","website-helpers.notes/make-index-menu","category-selections","website-helpers.common-components/dropdown-check-list","cljs.core/deref","website-helpers.utils/get-selected-vars","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-selected-vars get-url-param-selections]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [capitalize replace replace-first]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (<= (count notes) 1)\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       (merge\n         {largest-category (get-notes-by-largest-category\n                             largest-notes (conj categories-to-ignore\n                                                 largest-category))}\n         (get-notes-by-largest-category other-notes categories-to-ignore))))))\n\n; (get-notes-by-largest-category (set example-notes))\n\n\n(defn note-to-li\n  [note]\n  [:li {:key (:name note)}\n   [:a {:href (-> note\n                  :path\n                  (replace-first \"content\" \"\")\n                  (replace #\".md\" \"/\"))}\n    (:title note)]])\n\n   \n(defn make-subtree\n  [notes-by-category]\n  (into [:ul] (reduce concat\n                      (for [[category subtree] notes-by-category]\n                        (if (= category :notes)\n                          (into [] (for [note subtree]\n                                     (note-to-li note)))\n                          [[:li {:key category}\n                            [:details {:id category}\n                             [:summary [:strong (capitalize category)]]\n                             (make-subtree subtree)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (set (filter #(not (empty? (intersection selected-categories\n                                           (:categories %))))\n               notes)))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)))\n\n(defn get-category-selections\n  [notes]\n  (r/atom (get-url-param-selections\n            (set (keys (get-notes-by-category notes))))))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (let [category-selections (get-category-selections notes)]\n    (fn []\n      [:div\n        [:div [dropdown-check-list category-selections \"Select Categories\"]] \n        (make-category-menu\n          notes (get-selected-vars @category-selections))])))\n"]}