{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__37428","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__37430","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__37432","cljs.core/chunk-buffer","i__37431","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37429","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__37427","note","category","var_args","G__37434","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__37435","vec__37436","cljs.core.nth","_","v","s__37440","b__37442","i__37441","vec__37443","iter__37439","vec__37446","notes-map","cljs.core/contains?","G__37450","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__37451","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","cljs.core/set","website-helpers.all-data/notes","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note->link","cur-page-note","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__37454#","cljs.core.filter","website-helpers.notes/make-subtree","notes-by-category","cur-page","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__37457","b__37459","i__37458","vec__37460","iter__37456","vec__37467","subtree","p1__37455#","k","cljs.core/name","s__37464","b__37466","i__37465","iter__37463","s__37471","b__37473","i__37472","iter__37470","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","p1__37474#","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__37476","b__37478","i__37477","vec__37479","iter__37475","vec__37482","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__37486","b__37488","i__37487","vec__37489","iter__37485","vec__37492","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__10764__auto__","cljs.core/List","result__10765__auto__","cljs.test/report","t__10815__auto__","e37495","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/filter-category-selections","s__37497","b__37499","i__37498","iter__37496","cljs.core/keys","cljs.core/deref","website-helpers.global/url-params","website-helpers.notes/make-index-menu","category-selections","reagent.core.atom","website-helpers.utils/get-url-param-selections","website-helpers.common-components/dropdown-check-list","website-helpers.utils/get-selected-vars","website-helpers.notes/random-page","cljs.core/rand-nth","cljs.core.prn","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-selected-vars get-url-param-selections]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.all-data :as ad]\n    [website-helpers.global :refer [url-params]]\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n(get-notes-by-largest-category (set ad/notes))\n\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)])\n\n(defn note-to-li\n  [note cur-page-note]\n  [:li {:key (:name note)}\n   (note->link note cur-page-note)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n   \n(defn make-subtree\n  [notes-by-category cur-page]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] (sort-by #(let [k (first %)]\n                                               (if (string? k) k (name k)))\n                                            notes-by-category)]\n            (if (= category :notes)\n              (into [] (for [note subtree] (note-to-li note cur-page)))\n              [[:li {:key category}\n                [:details {:id   category\n                           ; Expand all menus for the current page.\n                           :open (contains? (:categories cur-page) category)}\n                 [:summary [:strong (capitalize category)]]\n                 (make-subtree subtree cur-page)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (set (filter #(not (empty? (intersection selected-categories\n                                           (:categories %))))\n               notes)))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree)\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)\n                (get-cur-page-note notes)))\n\n; (organize-notes-by-category\n;   ad/notes \n;   (get-selected-vars {\"...\" false, \"Social\" false, \"Datavis\" false, \"Exercise\" false, \"Visual Art\" false, \"Housing\" false, \"Climbing\" false, \"Mind\" false, \"Hydroponics\" false, \"Competitive\" false, \"\u2b50top10\" false, \"Morality\" false, \"Solitary\" false, \"Consuming Content\" false, \"Software Dev\" false, \"Cat1\" false, \"Mechanic Ideas\" false, \"Health And Longevity\" false, \"Lifelogging\" false, \"Thought Experiments\" false, \"Philosophy\" false, \"Gamedev\" false, \"Movie\" false, \"Real Time\" false, \"Event Reports\" false, \"Investing And Finances\" false, \"Gaming\" false, \"Multiplayer\" false, \"Turn Based\" false, \"Game\" false, \"Habit\" false, \"Puzzle\" false, \"Understanding The World\" false, \"Story\" false, \"Programming\" false, \"Experiences\" false, \"Lifestyle\" false, \"Game Ideas\" false, \"Cat2\" false, \"Lifestyle Optimizations\" false}))\n\n(defn filter-category-selections\n  [notes]\n  (into {} (for [category (keys (get-notes-by-category notes))]\n              [category (contains? @url-params category)])))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (let [category-selections (r/atom (get-url-param-selections\n                                      (set (keys (filter-category-selections\n                                                   notes)))\n                                      url-params))]\n    (fn [] [:div\n            [:div\n             [dropdown-check-list category-selections \"Select Categories\"]]\n            (make-category-menu notes\n                                (get-selected-vars @category-selections))])))\n\n\n(defn ^:export random-page\n  [notes]\n  (fn []\n    (let [note (rand-nth notes)]\n      (prn note)\n      [:p \"Random Page: \" (note->link note nil)\n       [:span {:style {:font-size \"70%\"}}\n        \" (\" (join \", \" (:categories note)) \")\"]])))\n"]}