{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__46153","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__46155","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__46157","cljs.core/chunk-buffer","i__46156","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46154","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__46152","note","category","var_args","G__46159","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__46160","vec__46161","cljs.core.nth","_","v","s__46165","b__46167","i__46166","vec__46168","iter__46164","vec__46171","notes-map","cljs.core/contains?","G__46175","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__46176","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","cljs.core/set","website-helpers.all-data/notes","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__46179#","cljs.core.filter","cljs.core._EQ_","website-helpers.notes/make-subtree","notes-by-category","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__46181","b__46183","i__46182","vec__46184","iter__46180","vec__46191","subtree","s__46188","b__46190","i__46189","iter__46187","s__46195","b__46197","i__46196","iter__46194","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","p1__46198#","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__46200","b__46202","i__46201","vec__46203","iter__46199","vec__46206","k","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__46210","b__46212","i__46211","vec__46213","iter__46209","vec__46216","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__10764__auto__","cljs.core/List","result__10765__auto__","cljs.test/report","t__10815__auto__","e46219","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/filter-category-selections","s__46221","b__46223","i__46222","iter__46220","cljs.core/keys","cljs.core/deref","website-helpers.global/url-params","website-helpers.notes/make-index-menu","website-helpers.common-components/dropdown-check-list","website-helpers.utils/get-selected-vars","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-selected-vars get-url-param-selections]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.all-data :as ad]\n    [website-helpers.global :refer [url-params]]\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [capitalize replace replace-first]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n(get-notes-by-largest-category (set ad/notes))\n\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note-to-li\n  [note]\n  [:li {:key (:name note)}\n   [:a {:href (path->url (:path note))}\n    (:title note)]])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n   \n(defn make-subtree\n  [notes-by-category]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] notes-by-category]\n            (if (= category :notes)\n              (into [] (for [note subtree] (note-to-li note)))\n              [[:li {:key category}\n                [:details {:id   category\n                           ; Expand all menus for the current page.\n                           :open (contains? (:categories (get-cur-page-note\n                                                           (:notes subtree)))\n                                            category)}\n                 [:summary [:strong (capitalize category)]]\n                 (make-subtree subtree)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (set (filter #(not (empty? (intersection selected-categories\n                                           (:categories %))))\n               notes)))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree}\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)))\n\n; (organize-notes-by-category\n;   ad/notes \n;   (get-selected-vars {\"...\" false, \"Social\" false, \"Datavis\" false, \"Exercise\" false, \"Visual Art\" false, \"Housing\" false, \"Climbing\" false, \"Mind\" false, \"Hydroponics\" false, \"Competitive\" false, \"\u2b50top10\" false, \"Morality\" false, \"Solitary\" false, \"Consuming Content\" false, \"Software Dev\" false, \"Cat1\" false, \"Mechanic Ideas\" false, \"Health And Longevity\" false, \"Lifelogging\" false, \"Thought Experiments\" false, \"Philosophy\" false, \"Gamedev\" false, \"Movie\" false, \"Real Time\" false, \"Event Reports\" false, \"Investing And Finances\" false, \"Gaming\" false, \"Multiplayer\" false, \"Turn Based\" false, \"Game\" false, \"Habit\" false, \"Puzzle\" false, \"Understanding The World\" false, \"Story\" false, \"Programming\" false, \"Experiences\" false, \"Lifestyle\" false, \"Game Ideas\" false, \"Cat2\" false, \"Lifestyle Optimizations\" false}))\n\n(defn filter-category-selections\n  [notes]\n  (into {} (for [category (keys (get-notes-by-category notes))]\n              [category (contains? @url-params category)])))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (fn []\n    [:div\n      [:div [dropdown-check-list url-params \"Select Categories\"]] \n      (make-category-menu\n        notes (get-selected-vars (filter-category-selections notes)))]))\n"]}