{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__51650","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__51652","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__51654","cljs.core/chunk-buffer","i__51653","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__51651","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__51649","note","category","var_args","G__51661","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__51666","vec__51667","cljs.core.nth","_","v","s__51671","b__51673","i__51672","vec__51674","iter__51670","vec__51677","notes-map","cljs.core/contains?","G__51685","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__51693","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","cljs.core/set","website-helpers.all-data/notes","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note->link","cur-page-note","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__51709#","cljs.core.filter","website-helpers.notes/make-subtree","notes-by-category","cur-page","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__51714","b__51716","i__51715","vec__51721","iter__51713","vec__51734","subtree","s__51725","b__51727","i__51726","iter__51724","s__51738","b__51740","i__51739","iter__51737","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","p1__51752#","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__51757","b__51759","i__51758","vec__51763","iter__51756","vec__51773","k","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__51783","b__51785","i__51784","vec__51786","iter__51782","vec__51790","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__10764__auto__","cljs.core/List","result__10765__auto__","cljs.test/report","t__10815__auto__","e51794","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/filter-category-selections","s__51800","b__51802","i__51801","iter__51799","cljs.core/keys","cljs.core/deref","website-helpers.global/url-params","website-helpers.notes/make-index-menu","website-helpers.common-components/dropdown-check-list","website-helpers.utils/get-selected-vars","website-helpers.notes/random-page","cljs.core/rand-nth","cljs.core.prn","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-selected-vars get-url-param-selections]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.all-data :as ad]\n    [website-helpers.global :refer [url-params]]\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n(get-notes-by-largest-category (set ad/notes))\n\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)])\n\n(defn note-to-li\n  [note cur-page-note]\n  [:li {:key (:name note)}\n   (note->link note cur-page-note)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n   \n(defn make-subtree\n  [notes-by-category cur-page]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] notes-by-category]\n            (if (= category :notes)\n              (into [] (for [note subtree] (note-to-li note cur-page)))\n              [[:li {:key category}\n                [:details {:id   category\n                           ; Expand all menus for the current page.\n                           :open (contains? (:categories cur-page) category)}\n                 [:summary [:strong (capitalize category)]]\n                 (make-subtree subtree cur-page)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (set (filter #(not (empty? (intersection selected-categories\n                                           (:categories %))))\n               notes)))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree)\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)\n                (get-cur-page-note notes)))\n\n; (organize-notes-by-category\n;   ad/notes \n;   (get-selected-vars {\"...\" false, \"Social\" false, \"Datavis\" false, \"Exercise\" false, \"Visual Art\" false, \"Housing\" false, \"Climbing\" false, \"Mind\" false, \"Hydroponics\" false, \"Competitive\" false, \"\u2b50top10\" false, \"Morality\" false, \"Solitary\" false, \"Consuming Content\" false, \"Software Dev\" false, \"Cat1\" false, \"Mechanic Ideas\" false, \"Health And Longevity\" false, \"Lifelogging\" false, \"Thought Experiments\" false, \"Philosophy\" false, \"Gamedev\" false, \"Movie\" false, \"Real Time\" false, \"Event Reports\" false, \"Investing And Finances\" false, \"Gaming\" false, \"Multiplayer\" false, \"Turn Based\" false, \"Game\" false, \"Habit\" false, \"Puzzle\" false, \"Understanding The World\" false, \"Story\" false, \"Programming\" false, \"Experiences\" false, \"Lifestyle\" false, \"Game Ideas\" false, \"Cat2\" false, \"Lifestyle Optimizations\" false}))\n\n(defn filter-category-selections\n  [notes]\n  (into {} (for [category (keys (get-notes-by-category notes))]\n              [category (contains? @url-params category)])))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (fn []\n    [:div\n      [:div [dropdown-check-list url-params \"Select Categories\"]] \n      (make-category-menu\n        notes (get-selected-vars (filter-category-selections notes)))]))\n\n\n\n(defn ^:export random-page\n  [notes]\n  (fn []\n    (let [note (rand-nth notes)]\n      (prn note)\n      [:p \"Random Page: \" (note->link note nil)\n       [:span {:style {:font-size \"70%\"}}\n        \" (\" (join \", \" (:categories note)) \")\"]])))\n"]}