{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__4652__auto__","s__82732","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4648__auto__","s__82734","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__82736","cljs.core/chunk-buffer","i__82735","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__82733","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__82731","note","category","var_args","G__82738","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__82739","vec__82740","cljs.core.nth","_","v","s__82744","b__82746","i__82745","vec__82747","iter__82743","vec__82750","notes-map","cljs.core/contains?","G__82754","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__82755","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","cljs.core/set","website-helpers.all-data/notes","website-helpers.notes/note-to-li","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/make-subtree","notes-by-category","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__82759","b__82761","i__82760","vec__82762","iter__82758","vec__82769","subtree","cljs.core._EQ_","s__82766","b__82768","i__82767","iter__82765","s__82773","b__82775","i__82774","iter__82772","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","p1__82776#","cljs.core.filter","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__82778","b__82780","i__82779","vec__82781","iter__82777","vec__82784","k","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__82788","b__82790","i__82789","vec__82791","iter__82787","vec__82794","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__9749__auto__","cljs.core/List","result__9750__auto__","cljs.test/report","t__9800__auto__","e82797","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/get-category-selections","reagent.core.atom","website-helpers.utils/get-url-param-selections","cljs.core/keys","website-helpers.notes/make-index-menu","category-selections","website-helpers.common-components/dropdown-check-list","cljs.core/deref","website-helpers.utils/get-selected-vars","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-selected-vars get-url-param-selections]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.all-data :as ad]\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [capitalize replace replace-first]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n(get-notes-by-largest-category (set ad/notes))\n\n\n(defn note-to-li\n  [note]\n  [:li {:key (:name note)}\n   [:a {:href (-> note\n                  :path\n                  (replace-first \"content\" \"\")\n                  (replace #\".md\" \"/\"))}\n    (:title note)]])\n\n   \n(defn make-subtree\n  [notes-by-category]\n  (into [:ul] (reduce concat\n                      (for [[category subtree] notes-by-category]\n                        (if (= category :notes)\n                          (into [] (for [note subtree]\n                                     (note-to-li note)))\n                          [[:li {:key category}\n                            [:details {:id category}\n                             [:summary [:strong (capitalize category)]]\n                             (make-subtree subtree)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (set (filter #(not (empty? (intersection selected-categories\n                                           (:categories %))))\n               notes)))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)))\n\n; (organize-notes-by-category\n;   ad/notes \n;   (get-selected-vars {\"...\" false, \"Social\" false, \"Datavis\" false, \"Exercise\" false, \"Visual Art\" false, \"Housing\" false, \"Climbing\" false, \"Mind\" false, \"Hydroponics\" false, \"Competitive\" false, \"\u2b50top10\" false, \"Morality\" false, \"Solitary\" false, \"Consuming Content\" false, \"Software Dev\" false, \"Cat1\" false, \"Mechanic Ideas\" false, \"Health And Longevity\" false, \"Lifelogging\" false, \"Thought Experiments\" false, \"Philosophy\" false, \"Gamedev\" false, \"Movie\" false, \"Real Time\" false, \"Event Reports\" false, \"Investing And Finances\" false, \"Gaming\" false, \"Multiplayer\" false, \"Turn Based\" false, \"Game\" false, \"Habit\" false, \"Puzzle\" false, \"Understanding The World\" false, \"Story\" false, \"Programming\" false, \"Experiences\" false, \"Lifestyle\" false, \"Game Ideas\" false, \"Cat2\" false, \"Lifestyle Optimizations\" false}))\n\n(defn get-category-selections\n  [notes]\n  (r/atom (get-url-param-selections\n            (set (keys (get-notes-by-category notes))))))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (let [category-selections (get-category-selections notes)]\n    (fn []\n      [:div\n        [:div [dropdown-check-list category-selections \"Select Categories\"]] \n        (make-category-menu\n          notes (get-selected-vars @category-selections))])))\n"]}