{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":";AAMA,6BAAA,mFAAA,mDAAA,mFAAA,gEAAA,mFAAA,kDAAA,0EAAA,mFAAA,6DAAA,kEAAA,mFAAA,uDAAA,mFAAA,kEAAA,0EAAA,mFAAA,qDAAA,kEAAA,mFAAA,qDAAA,l5CAAKA;AAOL,+BAAA,mFAAA,yDAAA,3KAAKC;AAGL,sCAAA,mFAAA,2CAAA,qDAAA,IAAA,qDAAA,sBAAA,sDAAA,MAAA,gEAAA,iFAAA,SAAA,gCAAA,2CAAA,qDAAA,IAAA,qDAAA,sBAAA,sDAAA,MAAA,gEAAA,iFAAA,gCAAA,2CAAA,qDAAA,IAAA,qDAAA,sBAAA,sDAAA,MAAA,gEAAA,iFAAA,tzCAAKC;AAML;;;8CAAA,9CAAMC,oGAIHC;AAJH,AAKE,kKAAA,3JAACC,8CAAMC,qBAAW,AAACC,gDAAQD,qBAAWE,sDAC/B,iBAAAC,qBAAA,oEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAE,mBAAAF;AAAA,AAAA,WAAA,AAAAG,gBAAAD,vBAAMsB;AAAN,AAAA,IAAApB,uBAAA;yFAAAC;AAAA,AAAA,YAAAN,kBAAA,KAAA;;AAAA,AAAA,IAAAM,eAAAA;;AAAA,AAAA,IAAAL,yBAAA,AAAAC,cAAAI;AAAA,AAAA,GAAAL;AAAA,AAAA,IAAAK,eAAAL;AAAA,AAAA,GAAA,AAAAM,6BAAAD;AAAA,IAAAE,kBAk6E0C,AAAAsF,sBAAAxF;IAl6E1CG,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,eAAA,AAAAK,eAAAN,gBAAAK,1CACMa;AADN,AAAA,AAAA,AAAAX,uBAAAJ,SAAA,yDAAA,2CAAA,wDAAA,5GAEGe,2JAAmBD;;AAFtB,eAAA,CAAAZ,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,wEAAA,AAAAC,qBAAAb;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,eAAA,AAAAP,gBAAAE,3BACMoB;AADN,AAAA,OAAAN,eAAA,yDAAA,2CAAA,wDAAA,gEAAA,AAAAF,wEAAA,AAAAG,eAAAf,nQAEGoB,2JAAmBD;;;AAFtB;;;;;CAAA,KAAA;;;IAAAH,mBAAA,AAAApB,cAAA,AAAAG,qBACe,AAAA,8FAAaoB;AAD5B,AAAA,GAAAH;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,0DAAA,AAAAH,eAAAtB;;AAAA,eAAA,AAAAsB,eAAAtB;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAWL;;;AAQpB,AAAA,6CAAA,qDAAAkC,lGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMD,sFACFpC;AADJ,AACW,gFAAA,zEAACsC;;;AADZ,CAAA,2EAAA,3EAAMF,sFAEFpC,MAAMuC;AAFV,AAGG,OAAC5B,gBACC,AAAC6B,kBACC,AAACC,gDAAQ,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AAAY,OAAC7B,gBAAM6B;GACnB,iBAAAzC,qBAAA,4CAAA0C;AAAA,AAAA,YAAAxC,kBAAA,KAAA;AAAA,AAAA,IAAAwC,eAAAA;;AAAA,AAAA,IAAAvC,qBAAA,AAAAC,cAAAsC;AAAA,AAAA,GAAAvC;AAAA,AAAA,IAAAuC,eAAAvC;AAAA,AAAA,GAAA,AAAAM,6BAAAiC;AAAA,IAAAhC,kBAo5EmC,AAAAsF,sBAAAtD;IAp5EnC/B,qBAAA,AAAAC,gBAAAF;IAAAiC,WAAA,AAAA7B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAiC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjC;AAAA,IAAAkC,aAAA,AAAA7B,eAAAN,gBAAAkC;eAAA,AAAAL,4CAAAM,WAAA,IAAA,tEAAOjB;gBAAP,AAAAW,4CAAAM,WAAA,IAAA,vEAAgBG;AAAhB,AAAA,GACY,GAAK,AAACC,0BAAUf,qBAAqBN;AADjD,AAAA,AAAAX,uBAAA0B,SAAA,mFAEGf,SAAS,AAAA,sFAAQoB;;AAFpB,eAAA,CAAAJ,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAA1B,qBAAA,AAAAC,gBAAAwB,UAAA,AAAAG,kCAAA,AAAAzB,qBAAAqB;;AAAA,OAAAxB,qBAAA,AAAAC,gBAAAwB,UAAA;;;AAAA,IAAAI,aAAA,AAAAzC,gBAAAoC;eAAA,AAAAH,4CAAAQ,WAAA,IAAA,tEAAOnB;gBAAP,AAAAW,4CAAAQ,WAAA,IAAA,vEAAgBC;AAAhB,AAAA,GACY,GAAK,AAACC,0BAAUf,qBAAqBN;AADjD,OAAAN,eAAA,qMAAA,AAAAwB,kCAAA,AAAAvB,eAAAmB,nKAEGd,SAAS,AAAA,sFAAQoB;;AAFpB,eAAA,AAAAzB,eAAAmB;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA1C,mBAA2B,AAACN,4CAAsBC;;;;AANlE,CAAA,qEAAA,rEAAMoC;;AAAN,AAcA,AAAA,sDAAA,8DAAAF,pHAAMsB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAMmB,+FACFxD;AADJ,AACW,+FAAA,xFAACyD,kFAA8BzD;;;AAD1C,CAAA,oFAAA,pFAAMwD,+FAEFxD,MAAMuC;AAFV,AAGG,GAAI,2BAAA,1BAAI,AAACtB,gBAAMjB;AAAf,kDAAA,wDACUA;;AACR,IAAA0D,aACM,AAACpB,yEAAqBtC,MAAMuC;uBADlC,AAAAK,4CAAAc,WAAA,IAAA,9EAAOC;oBAAP,AAAAf,4CAAAc,WAAA,IAAA,3EAAwBE;IAElBC,cAAY,AAACC,qDAAW9D,MAAM4D;AAFpC,AAGE,8GAAA,vGAACG,uJACEJ,iBAAiB,AAACF,kFACCG,cAAc,AAACI,6CAAKzB,qBACAoB,qBACxC,AAACF,kFAA8BI,YAAYtB;;;;AAZpD,CAAA,8EAAA,9EAAMiB;;AAAN,AAiBA,mCAAA,nCAAMS,8EACHjC;AADH,AAAA,0FAAA,gDAAA,2CAAA,qJAAA,mFAAA,gDAAA,2CAAA,/QAEa,AAAA,mFAAOA,wXACFA,hHAEA,6BAAA,AAAA,yFAAA,UAAA,hIAACkC,vBACD,2JAAA,MAAA,jKAACC,8KACf,AAAA,oFAAQnC;;AAGZ,qCAAA,rCAAMoC,kFACHC;AADH,AAEE,oDAAA,mFAAA,hIAACC,0LAAW,AAACC,+CAAOC,iBACA,iBAAAnE,qBAAA,2DAAAoE;AAAA,AAAA,YAAAlE,kBAAA,KAAA;AAAA,AAAA,IAAAkE,eAAAA;;AAAA,AAAA,IAAAjE,qBAAA,AAAAC,cAAAgE;AAAA,AAAA,GAAAjE;AAAA,AAAA,IAAAiE,eAAAjE;AAAA,AAAA,GAAA,AAAAM,6BAAA2D;AAAA,IAAA1D,kBA82E6B,AAAAsF,sBAAA5B;IA92E7BzD,qBAAA,AAAAC,gBAAAF;IAAA2D,WAAA,AAAAvD,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA2D,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3D;AAAA,IAAA4D,aAAA,AAAAvD,eAAAN,gBAAA4D;eAAA,AAAA/B,4CAAAgC,WAAA,IAAA,tEAAO3C;cAAP,AAAAW,4CAAAgC,WAAA,IAAA,rEAAgBG;AAAhB,AAAA,AAAA,AAAAzD,uBAAAoD,SACE,EAAI,sDAAA,tDAACM,6CAAE/C,mEACL,6CAAA,7CAACqC,8EAAQ,iBAAAjE,qBAAA;gFAAA4E;AAAA,AAAA,YAAA1E,kBAAA,KAAA;;AAAA,AAAA,IAAA0E,eAAAA;;AAAA,AAAA,IAAAzE,yBAAA,AAAAC,cAAAwE;AAAA,AAAA,GAAAzE;AAAA,AAAA,IAAAyE,eAAAzE;AAAA,AAAA,GAAA,AAAAM,6BAAAmE;AAAA,IAAAlE,sBA42EgB,AAAAsF,sBAAApB;IA52EhBjE,yBAAA,AAAAC,gBAAAF;IAAAmE,WAAA,AAAA/D,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAmE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnE;AAAA,WAAA,AAAAK,eAAAN,oBAAAoE,1CAAMnD;AAAN,AAAA,AAAA,AAAAV,uBAAA4D,SACE,AAACjB,iCAAWjC;;AADd,eAAA,CAAAmD,WAAA;;;;AAAA;;;;;AAAA,OAAA5D,qBAAA,AAAAC,gBAAA0D,UAAA,AAAAE,+DAAA,AAAA1D,qBAAAuD;;AAAA,OAAA1D,qBAAA,AAAAC,gBAAA0D,UAAA;;;AAAA,WAAA,AAAAvE,gBAAAsE,vBAAMjD;AAAN,AAAA,OAAAL,sDAAA,AAAAyD,+DAAA,AAAAxD,eAAAqD,rHACE,AAAChB,iCAAWjC;;;AADd;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAA3B,mBAAW0E;MADtB,mFAAA,mFAAA,gDAAA,2CAAA,qEAAA,mFAAA,2DAAA,2CAAA,mEAAA,mFAAA,0DAAA,mFAAA,7eAGc9C,4PACKA,ySACK,AAACwD,0BAAWxD,0BAC/B,CAACmC,mEAAAA,4EAAAA,XAAaW,wDAAAA;;AAPrB,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAApD,qBAAA,AAAAC,gBAAAkD,UAAA,AAAAG,iDAAA,AAAAnD,qBAAA+C;;AAAA,OAAAlD,qBAAA,AAAAC,gBAAAkD,UAAA;;;AAAA,IAAAI,aAAA,AAAAnE,gBAAA8D;eAAA,AAAA7B,4CAAAkC,WAAA,IAAA,tEAAO7C;cAAP,AAAAW,4CAAAkC,WAAA,IAAA,rEAAgBC;AAAhB,AAAA,OAAApD,eACE,EAAI,sDAAA,tDAACqD,6CAAE/C,mEACL,6CAAA,7CAACqC,8EAAQ,iBAAAjE,qBAAA;gFAAAgF;AAAA,AAAA,YAAA9E,kBAAA,KAAA;AAAA,AAAA,IAAA8E,eAAAA;;AAAA,AAAA,IAAA7E,yBAAA,AAAAC,cAAA4E;AAAA,AAAA,GAAA7E;AAAA,AAAA,IAAA6E,eAAA7E;AAAA,AAAA,GAAA,AAAAM,6BAAAuE;AAAA,IAAAtE,kBA42EgB,AAAAsF,sBAAAhB;IA52EhBrE,qBAAA,AAAAC,gBAAAF;IAAAuE,WAAA,AAAAnE,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAuE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvE;AAAA,WAAA,AAAAK,eAAAN,gBAAAwE,tCAAMvD;AAAN,AAAA,AAAA,AAAAV,uBAAAgE,SACE,AAACrB,iCAAWjC;;AADd,eAAA,CAAAuD,WAAA;;;;AAAA;;;;;AAAA,OAAAhE,qBAAA,AAAAC,gBAAA8D,UAAA,AAAAE,+DAAA,AAAA9D,qBAAA2D;;AAAA,OAAA9D,qBAAA,AAAAC,gBAAA8D,UAAA;;;AAAA,WAAA,AAAA3E,gBAAA0E,vBAAMrD;AAAN,AAAA,OAAAL,sDAAA,AAAA6D,+DAAA,AAAA5D,eAAAyD,rHACE,AAACpB,iCAAWjC;;;AADd;;;;GAAA,KAAA;;;AAAA,AAAA,OAAA3B,mBAAW0E;onCAFxB,AAAAF,iDAAA,AAAAjD,eAAA6C,9qCACE,mFAAA,mFAAA,gDAAA,2CAAA,qEAAA,mFAAA,2DAAA,2CAAA,mEAAA,mFAAA,0DAAA,mFAAA,7eAGcxC,4PACKA,ySACK,AAACwD,0BAAWxD,0BAC/B,CAACmC,mEAAAA,4EAAAA,XAAaW,wDAAAA;;;AAPrB;;;;GAAA,KAAA;;AAAA,AAAA,OAAA1E,mBAAyBgE;;;AAU/C,iDAAA,jDAAMqB,0GACH1F,MAAM2F;AADT,AAEE,sDAAA,WAAAC,1DAACC;AAAD,AAAS,UAAK,AAACC,uBAAO,AAACC,uDAAaJ,oBAAoB,AAAA,8FAAAC;GAChD5F;;AAIV,2CAAA,3CAAMgG,8FACHhG,MAAM2F,oBAAoBM;AAD7B,AAEE,0CAAA,iBAAAC,WAAA,cAAI,AAACR,+CAAyB1F,MAAM2F,nEAClCQ,/DAEA/B;AAHF,AAAA,sGAAA8B,sCAAAA,pIAEED,gDAAAA,0DAAAA;;;AAGJ,oDAAA,iFAAA,SAAA,SAAA,vJAAKG","names":["website-helpers.notes/Note","website-helpers.notes/Hiccup","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__4652__auto__","s__50525","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4648__auto__","s__50527","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__50529","cljs.core/chunk-buffer","i__50528","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50526","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__50524","note","category","var_args","G__50531","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__50532","vec__50533","cljs.core.nth","_","v","s__50537","b__50539","i__50538","vec__50540","iter__50536","vec__50543","notes-map","cljs.core/contains?","G__50547","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__50548","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/note-to-li","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/make-subtree","notes-by-category","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__50552","b__50554","i__50553","vec__50555","iter__50551","vec__50562","subtree","cljs.core._EQ_","s__50559","b__50561","i__50560","iter__50558","s__50566","b__50568","i__50567","iter__50565","clojure.string/capitalize","website-helpers.notes/get-notes-for-categories","selected-categories","p1__50569#","cljs.core.filter","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/make-category-menu","organization-fn","G__50570","cljs.core/set","website-helpers.notes/example-selected-categories","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [clojure.set :refer [union difference intersection]]\n    [clojure.string :refer [split capitalize join replace replace-first\n                            includes? ends-with?]]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(def Hiccup [:vector :any])\n\n\n(def example-notes\n  [{:name \"1\" :path \"content/docs/one.md\" :title \"one\" :categories #{\"a\" \"b\"}}\n   {:name \"2\" :path \"content/docs/two.md\" :title \"two\" :categories #{\"a\"}}\n   {:name \"3\" :path \"content/docs/thr.md\" :title \"thr\" :categories #{\"c\"}}])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (<= (count notes) 1)\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       (merge\n         {largest-category (get-notes-by-largest-category\n                             largest-notes (conj categories-to-ignore\n                                                 largest-category))}\n         (get-notes-by-largest-category other-notes categories-to-ignore))))))\n\n; (get-notes-by-largest-category (set example-notes))\n\n\n(defn note-to-li\n  [note]\n  [:li {:key (:name note)}\n   [:a {:href (-> note\n                  :path\n                  (replace-first \"content\" \"\")\n                  (replace #\".md\" \"/\"))}\n    (:title note)]])\n\n   \n(defn make-subtree\n  [notes-by-category]\n  (into [:ul] (reduce concat\n                      (for [[category subtree] notes-by-category]\n                        (if (= category :notes)\n                          (into [] (for [note subtree]\n                                     (note-to-li note)))\n                          [[:li {:key category}\n                            [:details {:id category}\n                             [:summary [:strong (capitalize category)]]\n                             (make-subtree subtree)]]])))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (filter #(not (empty? (intersection selected-categories (:categories %))))\n          notes))\n\n; (get-notes-for-categories example-notes {\"a\" true})\n\n(defn make-category-menu\n  [notes selected-categories organization-fn]\n  (-> (get-notes-for-categories notes selected-categories)\n    set\n    organization-fn\n    make-subtree))\n\n(def example-selected-categories #{\"a\" \"b\" \"c\"})\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\"\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n"]}