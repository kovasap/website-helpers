{"version":3,"sources":["website_helpers/page_graph.cljs"],"mappings":";AASA,sCAAA,mFAAA,mDAAA,mFAAA,qDAAA,kEAAA,mFAAA,qDAAA,4DAAA,mFAAA,7oBAAKA,+sBAGgBA;AAErB,+CAAA,mFAAA,2CAAA,qDAAA,eAAA,qDAAA,gBAAA,2CAAA,qDAAA,WAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,WAAA,qDAAA,cAAA,2CAAA,qDAAA,sBAAA,qDAAA,eAAA,2CAAA,qDAAA,gBAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,iCAAA,qDAAA,eAAA,2CAAA,qDAAA,yBAAA,qDAAA,eAAA,2CAAA,qDAAA,8BAAA,qDAAA,gBAAA,2CAAA,qDAAA,eAAA,qDAAA,cAAA,2CAAA,qDAAA,kBAAA,qDAAA,8CAAA,2CAAA,qDAAA,UAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,iBAAA,qDAAA,cAAA,2CAAA,qDAAA,kBAAA,qDAAA,+BAAA,2CAAA,qDAAA,UAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,qBAAA,qDAAA,eAAA,2CAAA,qDAAA,qBAAA,qDAAA,cAAA,2CAAA,qDAAA,iBAAA,qDAAA,eAAA,2CAAA,qDAAA,aAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,wBAAA,qDAAA,cAAA,2CAAA,qDAAA,4BAAA,qDAAA,eAAA,2CAAA,qDAAA,4BAAA,qDAAA,8BAAA,2CAAA,qDAAA,iBAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,yBAAA,qDAAA,cAAA,2CAAA,qDAAA,qCAAA,qDAAA,+CAAA,2CAAA,qDAAA,SAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,kBAAA,qDAAA,cAAA,2CAAA,qDAAA,WAAA,qDAAA,cAAA,2CAAA,qDAAA,oBAAA,qDAAA,eAAA,2CAAA,qDAAA,yBAAA,qDAAA,cAAA,2CAAA,qDAAA,qBAAA,qDAAA,8BAAA,2CAAA,qDAAA,uBAAA,qDAAA,OAAA,6DAAA,oFAAA,2CAAA,qDAAA,mBAAA,qDAAA,aAAA,2CAAA,qDAAA,wBAAA,qDAAA,cAAA,2CAAA,qDAAA,0BAAA,qDAAA,cAAA,2CAAA,qDAAA,qBAAA,qDAAA,cAAA,2CAAA,qDAAA,oBAAA,qDAAA,aAAA,2CAAA,qDAAA,sBAAA,qDAAA,aAAA,2CAAA,qDAAA,mCAAA,qDAAA,eAAA,2CAAA,qDAAA,aAAA,qDAAA,eAAA,2CAAA,qDAAA,mBAAA,qDAAA,cAAA,2CAAA,qDAAA,iBAAA,qDAAA,cAAA,2CAAA,qDAAA,cAAA,qDAAA,aAAA,2CAAA,qDAAA,aAAA,qDAAA,eAAA,2CAAA,qDAAA,kBAAA,qDAAA,cAAA,2CAAA,qDAAA,UAAA,qDAAA,gBAAA,2CAAA,qDAAA,gBAAA,qDAAA,eAAA,2CAAA,qDAAA,mBAAA,qDAAA,cAAA,2CAAA,qDAAA,6BAAA,qDAAA,cAAA,2CAAA,qDAAA,WAAA,qDAAA,eAAA,2CAAA,qDAAA,qBAAA,qDAAA,+BAAA,2CAAA,qDAAA,cAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,aAAA,qDAAA,eAAA,2CAAA,qDAAA,cAAA,qDAAA,+BAAA,2CAAA,qDAAA,yBAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,4CAAA,qDAAA,gBAAA,2CAAA,qDAAA,4BAAA,qDAAA,cAAA,2CAAA,qDAAA,aAAA,qDAAA,eAAA,2CAAA,qDAAA,gBAAA,qDAAA,eAAA,2CAAA,qDAAA,oCAAA,qDAAA,cAAA,2CAAA,qDAAA,gBAAA,qDAAA,eAAA,2CAAA,qDAAA,WAAA,qDAAA,+BAAA,2CAAA,qDAAA,cAAA,qDAAA,OAAA,6DAAA,mFAAA,2CAAA,qDAAA,YAAA,qDAAA,cAAA,2CAAA,qDAAA,gBAAA,qDAAA,cAAA,2CAAA,qDAAA,kBAAA,qDAAA,t2aAAKC;AA4GL,uCAAA,vCAAMC,sFACHC;AADH,AAEE,OAACC,+CAAOC,iBACN,iBAAAC,qBAAA,6DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA+0E+C,AAAA6I,sBAAAlJ;IA/0E/CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,cAAA,AAAAK,eAAAN,gBAAAK,zCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,6CAAA,7CAACa,8EAAQ,iBAAAtB,qBAAA;kFAAAuB;AAAA,AAAA,YAAArB,kBAAA,KAAA;;AAAA,AAAA,IAAAqB,eAAAA;;AAAA,AAAA,IAAApB,yBAAA,AAAAC,cAAAmB;AAAA,AAAA,GAAApB;AAAA,AAAA,IAAAoB,eAAApB;AAAA,AAAA,GAAA,AAAAE,6BAAAkB;AAAA,IAAAjB,sBA80EoC,AAAA6I,sBAAA5H;IA90EpChB,yBAAA,AAAAC,gBAAAF;IAAAkB,WAAA,AAAAd,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAkB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAlB;AAAA,YAAA,AAAAK,eAAAN,oBAAAmB,3CAAMM;AAAN,AAAA,AAAA,AAAAlB,uBAAAW,SAAA,2CAAA,iJAAA,kJAAA,sDAAA,hSACW,AAAA,iFAAMO,+DACN,AAAA,iFAAMV;;AAFjB,eAAA,CAAAI,WAAA;;;;AAAA;;;;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAS,UAAA,AAAAE,iEAAA,AAAAT,qBAAAM;;AAAA,OAAAT,qBAAA,AAAAC,gBAAAS,UAAA;;;AAAA,YAAA,AAAAN,gBAAAK,xBAAMQ;AAAN,AAAA,OAAAZ,eAAA,2CAAA,iJAAA,kJAAA,sDAAA,YAAA,AAAAO,iEAAA,AAAAN,eAAAG,5XACW,AAAA,iFAAMQ,+DACN,AAAA,iFAAMV;;;AAFjB;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAArB,mBAAY,AAAA,2FAAWqB;;;AADlC,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,cAAA,AAAAS,gBAAAjB,1BAAMoB;AAAN,AAAA,OAAAF,eACE,6CAAA,7CAACG,8EAAQ,iBAAAtB,qBAAA;kFAAA2B;AAAA,AAAA,YAAAzB,kBAAA,KAAA;AAAA,AAAA,IAAAyB,eAAAA;;AAAA,AAAA,IAAAxB,yBAAA,AAAAC,cAAAuB;AAAA,AAAA,GAAAxB;AAAA,AAAA,IAAAwB,eAAAxB;AAAA,AAAA,GAAA,AAAAE,6BAAAsB;AAAA,IAAArB,kBA80EoC,AAAA6I,sBAAAxH;IA90EpCpB,qBAAA,AAAAC,gBAAAF;IAAAsB,WAAA,AAAAlB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAsB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAtB;AAAA,YAAA,AAAAK,eAAAN,gBAAAuB,vCAAME;AAAN,AAAA,AAAA,AAAAlB,uBAAAe,SAAA,2CAAA,iJAAA,kJAAA,sDAAA,hSACW,AAAA,iFAAMG,+DACN,AAAA,iFAAMV;;AAFjB,eAAA,CAAAQ,WAAA;;;;AAAA;;;;;AAAA,OAAAf,qBAAA,AAAAC,gBAAAa,UAAA,AAAAE,iEAAA,AAAAb,qBAAAU;;AAAA,OAAAb,qBAAA,AAAAC,gBAAAa,UAAA;;;AAAA,YAAA,AAAAV,gBAAAS,xBAAMI;AAAN,AAAA,OAAAZ,eAAA,2CAAA,iJAAA,kJAAA,sDAAA,YAAA,AAAAW,iEAAA,AAAAV,eAAAO,5XACW,AAAA,iFAAMI,+DACN,AAAA,iFAAMV;;;AAFjB;;;;GAAA,KAAA;;;AAAA,AAAA,OAAArB,mBAAY,AAAA,2FAAWqB;MADlC,AAAAL,mDAAA,AAAAI,eAAAnB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAcH;;;AAMlB,gDAAA,hDAAMmC,wGACHC,MAAMC;AADT,AAEE,OAACpC,+CAAOC,iBACA,iBAAAC,qBAAA,sEAAAmC;AAAA,AAAA,YAAAjC,kBAAA,KAAA;AAAA,AAAA,IAAAiC,eAAAA;;AAAA,AAAA,IAAAhC,qBAAA,AAAAC,cAAA+B;AAAA,AAAA,GAAAhC;AAAA,AAAA,IAAAgC,eAAAhC;AAAA,AAAA,GAAA,AAAAE,6BAAA8B;AAAA,IAAA7B,kBAs0EyC,AAAA6I,sBAAAhH;IAt0EzC5B,qBAAA,AAAAC,gBAAAF;IAAA8B,WAAA,AAAA1B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA8B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA9B;AAAA,WAAA,AAAAK,eAAAN,gBAAA+B,tCAAME;AAAN,AAAA,AAAA,AAAA1B,uBAAAuB,SACE,6CAAA,7CAACd,8EAAQ,iBAAAtB,qBAAA;2FAAAwC;AAAA,AAAA,YAAAtC,kBAAA,KAAA;;AAAA,AAAA,IAAAsC,eAAAA;;AAAA,AAAA,IAAArC,yBAAA,AAAAC,cAAAoC;AAAA,AAAA,GAAArC;AAAA,AAAA,IAAAqC,eAAArC;AAAA,AAAA,GAAA,AAAAE,6BAAAmC;AAAA,IAAAlC,sBAq0E8B,AAAA6I,sBAAA3G;IAr0E9BjC,yBAAA,AAAAC,gBAAAF;IAAAmC,WAAA,AAAA/B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAmC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnC;AAAA,eAAA,AAAAK,eAAAN,oBAAAoC,9CAAMM;AAAN,AAAA,IACYC,MAAI,AAACC,4CAAIhB,kBAAkBc;AADvC,AAAA,oBAEYC;AAFZ,AAAA,AAAApC,uBAAA4B,SAAA,2CAAA,gJAAA,4DAAA,sDAAA,zMAGW,AAAA,iFAAMF,8DACNU;;AAJX,eAAA,CAAAP,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAA5B,qBAAA,AAAAC,gBAAA0B,UAAA,AAAAE,0EAAA,AAAA1B,qBAAAuB;;AAAA,OAAA1B,qBAAA,AAAAC,gBAAA0B,UAAA;;;AAAA,eAAA,AAAAvB,gBAAAsB,3BAAMQ;AAAN,AAAA,IACYC,MAAI,AAACC,4CAAIhB,kBAAkBc;AADvC,AAAA,oBAEYC;AAFZ,OAAA9B,eAAA,2CAAA,gJAAA,4DAAA,sDAAA,YAAA,AAAAwB,0EAAA,AAAAvB,eAAAoB,9SAGW,AAAA,iFAAMD,8DACNU;;AAJX,eAAA,AAAA7B,eAAAoB;;;;;;AAAA;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAxC,mBAAe,AAAA,8FAAauC;;;AADvC,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAAvB,qBAAA,AAAAC,gBAAAqB,UAAA,AAAAE,4DAAA,AAAArB,qBAAAkB;;AAAA,OAAArB,qBAAA,AAAAC,gBAAAqB,UAAA;;;AAAA,WAAA,AAAAlB,gBAAAiB,vBAAMI;AAAN,AAAA,OAAApB,eACE,6CAAA,7CAACG,8EAAQ,iBAAAtB,qBAAA;2FAAA4C;AAAA,AAAA,YAAA1C,kBAAA,KAAA;AAAA,AAAA,IAAA0C,eAAAA;;AAAA,AAAA,IAAAzC,yBAAA,AAAAC,cAAAwC;AAAA,AAAA,GAAAzC;AAAA,AAAA,IAAAyC,eAAAzC;AAAA,AAAA,GAAA,AAAAE,6BAAAuC;AAAA,IAAAtC,kBAq0E8B,AAAA6I,sBAAAvG;IAr0E9BrC,qBAAA,AAAAC,gBAAAF;IAAAuC,WAAA,AAAAnC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAuC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvC;AAAA,eAAA,AAAAK,eAAAN,gBAAAwC,1CAAME;AAAN,AAAA,IACYC,MAAI,AAACC,4CAAIhB,kBAAkBc;AADvC,AAAA,oBAEYC;AAFZ,AAAA,AAAApC,uBAAAgC,SAAA,2CAAA,gJAAA,4DAAA,sDAAA,zMAGW,AAAA,iFAAMN,8DACNU;;AAJX,eAAA,CAAAH,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAhC,qBAAA,AAAAC,gBAAA8B,UAAA,AAAAE,0EAAA,AAAA9B,qBAAA2B;;AAAA,OAAA9B,qBAAA,AAAAC,gBAAA8B,UAAA;;;AAAA,eAAA,AAAA3B,gBAAA0B,3BAAMI;AAAN,AAAA,IACYC,MAAI,AAACC,4CAAIhB,kBAAkBc;AADvC,AAAA,oBAEYC;AAFZ,OAAA9B,eAAA,2CAAA,gJAAA,4DAAA,sDAAA,YAAA,AAAA4B,0EAAA,AAAA3B,eAAAwB,9SAGW,AAAA,iFAAML,8DACNU;;AAJX,eAAA,AAAA7B,eAAAwB;;;;;;AAAA;;;;GAAA,KAAA;;;AAAA,AAAA,OAAA5C,mBAAe,AAAA,8FAAauC;MADvC,AAAAD,4DAAA,AAAAlB,eAAAe;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAnC,mBAAWiC;;;AAQrB,AAAA,0CAAA,kDAAAkB,5FAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6EAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,+EAAA,/EAAME,0FACHxB,MAAQ6B;AADX,AAEE,oDAAA,7CAACxC,8EAAQ,iBAAAtB,qBAAA,iDAAA+D;AAAA,AAAA,YAAA7D,kBAAA,KAAA;AAAA,AAAA,IAAA6D,eAAAA;;AAAA,AAAA,IAAA5D,qBAAA,AAAAC,cAAA2D;AAAA,AAAA,GAAA5D;AAAA,AAAA,IAAA4D,eAAA5D;AAAA,AAAA,GAAA,AAAAE,6BAAA0D;AAAA,IAAAzD,kBA4zEwC,AAAA6I,sBAAApF;IA5zExCxD,qBAAA,AAAAC,gBAAAF;IAAA0D,WAAA,AAAAtD,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA0D,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA1D;AAAA,QAAA,AAAAK,eAAAN,gBAAA2D,nCAAME;AAAN,AAAA,AAAA,AAAAtD,uBAAAmD,SACE,iBAAAI,eAAC,AAACE,8CAAMC,eAAKT;AAAb,AAAA,QAAAM,6CAAAA,gDAAAA,LAAyBD,4BAAAA;;;AAD3B,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAAnD,qBAAA,AAAAC,gBAAAiD,UAAA,AAAAE,uCAAA,AAAAjD,qBAAA8C;;AAAA,OAAAjD,qBAAA,AAAAC,gBAAAiD,UAAA;;;AAAA,QAAA,AAAA9C,gBAAA6C,pBAAMI;AAAN,AAAA,OAAAhD,eACE,iBAAAkD,eAAC,AAACC,8CAAMC,eAAKT;AAAb,AAAA,QAAAO,6CAAAA,gDAAAA,LAAyBF,4BAAAA;KAD3B,AAAAD,uCAAA,AAAA9C,eAAA2C;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/D,mBAAQiC;;;;AAFnB,CAAA,kEAAA,lEAAMwB;;AAAN;AAAA,CAAA,4DAAA,WAAAC,vEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAzC,gBAAAwC;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAD;;;AAAA,AAKA,wCAAA,xCAAMc,wFACHjC;AADH,AAEE,2DAAA,qDAAA,WAAAkC,pHAACC,+CAAOnC;AAAR,AAAoB,GAAI,CAAAkC,oBAAA;AAAJ;;AAEE,OAACE,UAAU,CAAAF,mBAAA;;;;AAEnC,0CAAA,1CAAMG,4FACHrC;AADH,AAEE,0DAAA,nDAACsC,8CAAMtC,2DAAY,8GAAA,IAAA,uKAAA,IAAA,8HAAA,IAAA,7ZACE,qGAAA,pGAAM,AAAA,2FAAWA,sBACjB,6CAAA,7CAACuC,iDAAI,AAACtE,gBAAM,AAAA,2FAAW+B,eACvB,CAAA,OAAM,AAAC/B,gBAAM,AAAA,2FAAW+B;;AAE/C,6CAAA,7CAAMwC,kGACHxC;AADH,AAEE,GAAI,6CAAA,7CAACuC,iDAAM,AAACE,eAAK,AAAA,mFAAOzC;AACtBA;;oJACIA,/CACA,oDAAA,qDAAA,WAAA0C,pHAACP,/CACD,AAACA,tDAED,OAACA;AAHD,AAAe,OAACxD,gBAAM,mDAAA+D,iBAAA,pEAACC;IACvB,qDAAA,WAAAC;AAAA,AAAe,yHAAA,YAAA,9HAACC,uBAAQ,AAAClE,gBAAM,mDAAAiE,iBAAA,pEAACD;IAEhC,8DAAA,WAAAG;AAAA,AAAoB,OAACnE,gBAAM,mDAAAmE,iBAAA,pEAACH;;;;AAEpC,sCAAA,tCAAMI,oFACH/C;AADH,AAEE,2DAAA,8DAAA,WAAAgD,7HAACb,+CAAOnC;AAAR,AAAyB,8BAAAgD,iBAAA,SAAA,jDAACH;;;AAE5B;;;8CAAA,9CAAMI,oGAEHC;AAFH,+HAGO,kGAAA,lGAACP,mDAAM,4CAAKO,rKACZ,AAACC,4CAAIC,rGACL,OAACC;;AAER,2CAAA,3CAAMC,8FACHtD;AADH,AAEE,2DAAA,qDAAA,WAAAuD,pHAACpB,+CAAOnC;AAAR,mDACuB,uBAAAuD,iBAAA,IAAA,5CAACV,nDACD,OAACI;;;AAG1B,gDAAA,hDAAMO,wGACHC;AADH,AAEE,IAAMnG,eAAa,gDAAA,6DAAA,2CAAA,qDAAA,OAAA,uEAAA,mDAAA,9UAACoG,mBAASC,8PAEWF;AAFxC,AAAA,kDAAA,gZAAA,xVAIU,AAACG,6EAAatG,+DACAgG,yCAAcP,oCAASP,2CAAgBP,sCACvCI,qGACd,AAAChF,qCAAUC;;AAGvB,gDAAA,6DAAA,2CAAA,qDAAA,OAAA,mDAAA,IAAA,3QAACoG,mBAASC,qTAIC,8BAAA,iFAAA,SAAA,vGAAME;IACAC,QAAM,AAACC,oDAAY,WAAKC,EAAEpC;AAAP,AAAU,uDAAA,hDAACU,8CAAMV,qDAAO,CAAA,MAAKoC;GAC7BC;AAFzB,AAGE,OAACC,yDACC,AAACC,iDAA6BL,MAAMD,YACpC,AAACO,uCAAmBP,WAAW,AAAC5F,gBAAM6F;;AAErD,AAAKO,oDACH,gDAAA,2CAAA,wDAAA,mFAAA,2CAAA,qDAAA,OAAA,qDAAA,IAAA,kDAAA,eAAA,2CAAA,qDAAA,OAAA,qDAAA,IAAA,kDAAA,uBAAA,uDAAA,mFAAA,2CAAA,yDAAA,IAAA,wDAAA,IAAA,sDAAA,phCAACC;AAIH,AAAKC,qDACH,AAACD,gDAAO,AAACd,8CAAmBpG;AAG9B,AAAA,wCAAA,gDAAAwD,xFAAe6D;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,sEAAA,tEAAeD,iFACXhB;AADJ,AAEG,qFAAA,9EAACkB,oEAAWlB;;;AAFf,CAAA,sEAAA,tEAAegB,iFAGXhB,UAAUmB;AAHd,AAIG,IAAMC,kBAAgB,AAACP,gDAAO,AAACd,8CAAmBC;AAAlD,AACE;AAAA,AAAA,0FAAA,mDAAA,2QAAA,xLAEKqB,0BAAM,AAACC,wDAAQC,gFAAUH,mDACzB,oHAAA,2EAAA,/LAACI,0DAAQL;;;;AARnB,CAAA,gEAAA,hEAAeH;;AAAf,AAWA,4CAAA,5CAAMS,gGACHpB,MAAMqB,oBAAoBC;AAD7B,AAEE,IAAMC,qBAAmB,EAAI,6CAAA,7CAAC9C,iDAAI,AAACtE,gBAAMkH,uBACb,AAACG,cAAI,AAACC,eAAKH,iBACXD;IACtBK,cAAY,AAACzB,oDAAY,WAAKC,EAAEpC;AAAP,AAAU,uDAAA,hDAACU,8CAAMV,qDAAO,CAAA,MAAKoC;GAC7B,AAACyB,+CACC3B,MAAMqB;IACjCxF,oBAAkB,8IAAA,OAAA,rJAAC2C,8CAAM,AAAC8B,uCAAmBiB,mBACA,CAAA,MAAK,AAACpH,gBAAMuH;IAEzDE,mBAAiB,WAAKC;AAAL,AAAA,kDAAA,uDAAA,oHAAA,2HAAA,8DAAA,GAAA,6DAAA,mFAAA,IAAA,tcAAeA,qDACD,AAAChF,4CAAIhB,kBAAkBgG,wDACtB,CAAA,mDAAA,HAASA;;AAX/C,AAAA,kDAAA,m/BAAA,37BAeU,AAAC/B,6EAAa,sDAAA,mFAAA,2CAAA,qDAAA,OAAA,mDAAA,IAAA,6DAAA,mFAAA,IAAA,IAAA,/bAACgC,2dAECJ,8DACA,AAACrC,4CAAIuC,iBAAiBL,4EACxB/B,yCAAcP,oCAASP,2CAAgBP,sCACvCI,qGACd,AAACuD,+CAEO,AAACnG,8CAAmB+F,YAAY7F,mBAIhC,iBAAAlC,qBAAA,kEAAAoI;AAAA,AAAA,YAAAlI,kBAAA,KAAA;AAAA,AAAA,IAAAkI,eAAAA;;AAAA,AAAA,IAAAjI,qBAAA,AAAAC,cAAAgI;AAAA,AAAA,GAAAjI;AAAA,AAAA,IAAAiI,eAAAjI;AAAA,AAAA,GAAA,AAAAE,6BAAA+H;AAAA,IAAA9H,kBAwsE+B,AAAA6I,sBAAAf;IAxsE/B7H,qBAAA,AAAAC,gBAAAF;IAAA+H,WAAA,AAAA3H,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA+H,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA/H;AAAA,IAAAgI,aAAA,AAAA3H,eAAAN,gBAAAgI;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAOI;QAAP,AAAAH,4CAAAD,WAAA,IAAA,/DAAShC;AAAT,AAAA,AAAA,AAAA1F,uBAAAwH,SAAA,2CAAA,yDAAA,IAAA,0DAAA,sDAAA,xDAEW9B;;AAFX,eAAA,CAAA+B,WAAA;;;;AAAA;;;;;AAAA,OAAAxH,qBAAA,AAAAC,gBAAAsH,UAAA,AAAAI,wDAAA,AAAAxH,qBAAAmH;;AAAA,OAAAtH,qBAAA,AAAAC,gBAAAsH,UAAA;;;AAAA,IAAAK,aAAA,AAAAxH,gBAAAkH;QAAA,AAAAI,4CAAAE,WAAA,IAAA,/DAAOC;QAAP,AAAAH,4CAAAE,WAAA,IAAA,/DAASnC;AAAT,AAAA,OAAApF,eAAA,2CAAA,yDAAA,IAAA,0DAAA,sDAAA,YAAA,AAAAsH,wDAAA,AAAArH,eAAAgH,3IAEW7B;;;AAFX;;;;GAAA,KAAA;;AAAA,AAAA,OAAAvG,mBAAYkC;;;AAOhC,AAAA,mDAAA,2DAAAiB,9GAAe0F;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5B,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,iFAAA,jFAAe4B,4FACXxC;AADJ,AACW,4FAAA,rFAACyC,+EAAsBzC;;;AADlC,CAAA,iFAAA,jFAAewC,4FAEXxC,MAAMc;AAFV,AAGG;AAAA,AACE,IAAMQ,iBAAgB,AAACoB,+CACC,AAAClB,cAAI,AAACC,eAAK,AAACkB,iDAA6B3C,SACzC4C;IAClB7B,kBAAgB,AAACP,gDACC,AAACY,0CAAepB,MACA,AAAC6C,wCAAkBvB,gBACnBA;AANxC,AAAA,0FAAA,mDAAA,2QAAA,xLAQIN,0BACA,AAACC,wDAAQC,gFAAUH,mDAEnB,oHAAA,2EAAA,/LAACI,0DAAQL;;;;AAflB,CAAA,2EAAA,3EAAe0B;;AAAf","names":["website-helpers.page-graph/PageTree","website-helpers.page-graph/example-page-tree","website-helpers.page-graph/get-links","all-subtrees","cljs.core.reduce","cljs.core/concat","iter__5523__auto__","s__30312","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__30314","cljs.core/chunk-buffer","i__30313","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30311","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","subtree","cljs.core.into","s__30317","b__30319","i__30318","iter__30316","s__30330","b__30332","i__30331","iter__30329","child","website-helpers.page-graph/get-category-links","nodes","categories-to-idx","s__30355","b__30357","i__30356","iter__30354","node","s__30365","b__30367","i__30366","iter__30364","s__30389","b__30391","i__30390","iter__30388","category","idx","cljs.core.get","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","website-helpers.page-graph/update-nodes","seq30402","G__30403","cljs.core/next","self__5754__auto__","update-fns","s__30408","b__30410","i__30409","iter__30407","n","fexpr__30411","fexpr__30412","cljs.core.apply","cljs.core/comp","website-helpers.page-graph/scale-size","p1__30413#","cljs.core.update","Math/sqrt","website-helpers.page-graph/assign-group","cljs.core.assoc","cljs.core._EQ_","website-helpers.page-graph/strip-extension","cljs.core/last","p1__30416#","clojure.string.split","p1__30417#","clojure.string/replace","p1__30418#","website-helpers.page-graph/fix-path","p1__30419#","website-helpers.page-graph/capitalize-words","s","cljs.core.map","clojure.string/capitalize","clojure.string.join","website-helpers.page-graph/prettify-name","p1__30420#","website-helpers.page-graph/page-tree-to-graph","page-tree","cljs.core/tree-seq","cljs.core/associative?","website_helpers.page_graph.update_nodes","categories","notes","cljs.core.map_indexed","i","website-helpers.notes/example-notes","website-helpers.notes/notes-by-category-to-children-tree","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","website-helpers.page-graph/page-graph-data-simple","reagent.core.atom","website-helpers.page-graph/example-page-graph-data","G__30423","website-helpers.page-graph/page-graph","js/Error","website_helpers.page_graph.page_graph","options","page-graph-data","website-helpers.graph/viz","reagent.core.track","website-helpers.graph/prechew","cljs.core.js__GT_clj","website-helpers.page-graph/notes-to-graph","selected-categories","all-categories","categories-to-show","cljs.core/set","cljs.core/keys","idxed-notes","website-helpers.notes/get-notes-for-categories","category-to-node","c","cljs.core.concat","s__30441","b__30443","i__30442","vec__30445","cljs.core.nth","iter__30440","vec__30448","_","G__30456","website-helpers.page-graph/page-graph-from-notes","website_helpers.page_graph.page_graph_from_notes","website-helpers.utils/get-url-param-selections","website-helpers.notes/filter-category-selections","website-helpers.global/url-params","website-helpers.utils/get-selected-vars","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.page-graph\n  (:require\n    [website-helpers.graph :as g]\n    [website-helpers.notes :as n]\n    [website-helpers.global :refer [url-params]]\n    [website-helpers.utils :refer [get-url-param-selections get-selected-vars]]\n    [clojure.string :refer [split replace join capitalize]]\n    [reagent.core :as r]))\n\n(def PageTree\n  [:map [:name :string]\n        [:size :int]\n        [:sequential PageTree]])\n\n(def example-page-tree\n  [{:name \"manifesto.md\", :size 10074}\n   {:name \"climbing\", :size 4096,\n    :children [{:name \"media.md\", :size 592}\n               {:name \"safety-checklist.md\", :size 3276}\n               {:name \"event-reports\", :size 4096,\n                :children [{:name \"2019-10-7-namaste-wall-zion.md\", :size 1899}\n                           {:name \"2020-8-10-lake-erie.md\", :size 1225}\n                           {:name \"2020-8-12-mile-high-club.md\", :size 10662}\n                           {:name \"first-512.md\", :size 214}\n                           {:name \"mcmahon-hall.md\", :size 928}]}]}\n   {:name \"datavis\", :size 4096,\n    :children [{:name \"reddit-tree.md\", :size 551}\n               {:name \"seattle-rain.md\", :size 2105}]}\n   {:name \"gamedev\", :size 4096,\n    :children [{:name \"common-patterns.md\", :size 2276}\n               {:name \"gamedev-context.md\", :size 246}\n               {:name \"my-projects.md\", :size 1131}\n               {:name \"game-ideas\", :size 4096,\n                :children [{:name \"farming-video-game.md\", :size 786}\n                           {:name \"roguelike-base-builder.md\", :size 2019}\n                           {:name \"safe-building-designer.md\", :size 507}]}\n               {:name \"mechanic-ideas\", :size 4096,\n                :children [{:name \"character-alignment.md\", :size 436}\n                           {:name \"low-friction-turn-based-tactics.md\", :size 3187}]}]}\n   {:name \"gaming\", :size 4096,\n    :children [{:name \"buying-games.md\", :size 912}\n               {:name \"chess.md\", :size 297}\n               {:name \"fps-principles.md\", :size 6329}\n               {:name \"oxygen-not-included.md\", :size 472}\n               {:name \"recommendations.md\", :size 326}]}\n   {:name \"health-and-longevity\", :size 4096,\n    :children [{:name \"aging-science.md\", :size 94}\n               {:name \"avoiding-accidents.md\", :size 244}\n               {:name \"biomarker-correlator.md\", :size 188}\n               {:name \"causes-of-death.md\", :size 703}\n               {:name \"chronic-stress.md\", :size 26}\n               {:name \"circadian-rhythm.md\", :size 72}\n               {:name \"continuous-glucose-monitoring.md\", :size 1384}\n               {:name \"cooking.md\", :size 9101}\n               {:name \"dental-health.md\", :size 135}\n               {:name \"dna-testing.md\", :size 670}\n               {:name \"exercise.md\", :size 29}\n               {:name \"fasting.md\", :size 4493}\n               {:name \"finding-care.md\", :size 275}\n               {:name \"food.md\", :size 16612}\n               {:name \"influences.md\", :size 8329}\n               {:name \"misc-research.md\", :size 409}\n               {:name \"my-physiological-states.md\", :size 636}\n               {:name \"sleep.md\", :size 4462}\n               {:name \"tracking-health.md\", :size 4196}]}\n   {:name \"hydroponics\", :size 4096,\n    :children [{:name \"journal.md\", :size 1525}\n               {:name \"my-setup.md\", :size 4052}]}\n   {:name \"investing-and-finances\", :size 4096,\n    :children [{:name \"comprehensive-housing-return-estimator.md\", :size 11714}\n               {:name \"financial-independence.md\", :size 745}\n               {:name \"housing.md\", :size 1515}\n               {:name \"influences.md\", :size 1368}\n               {:name \"monthly-costs-of-car-ownership.md\", :size 475}\n               {:name \"strategies.md\", :size 1243}\n               {:name \"taxes.md\", :size 2727}]}\n   {:name \"lifelogging\", :size 4096,\n    :children [{:name \"camera.md\", :size 869}\n               {:name \"influences.md\", :size 250}\n               {:name \"what-and-why.md\", :size 8752}]}])\n\n; (defn tree-seq-adding-path\n;   \"Like tree-seq, but takes in a tree of maps and a unique :tree-path key to\n;   each map.\n;   \n;   See https://clojuredocs.org/clojure.core/tree-seq#example-62780fc7e4b0b1e3652d75ea\"\n;   [branch? children root]\n;   (let [walk (fn walk [path node]\n;                (lazy-seq\n;                 (cons (assoc node :tree-path (str path \"/\" (:name node)))\n;                  (when (branch? node)\n;                    (mapcat (partial walk (str path \"/\" (:name node)))\n;                            (children node))))))]\n;     (walk nil root)))\n; \n; \n; (tree-seq-adding-path associative? :children\n;                       {:name \"home\" :children example-page-tree})\n; \n; (defn get-idxed-nodes\n;   [tree]\n;   (let [idxed-nodes\n;         (map-indexed\n;            (fn [i n] (assoc n :idx i))\n;            (tree-seq-adding-path associative? :children\n;                                  {:name \"home\" :children tree}))\n;         idxes-by-path (into {} (for [node idxed-nodes]\n;                                  [(:tree-path node) (:idx node)]))]\n;     (prn idxes-by-path)\n;     ; Now we update the one level deep children with the indicies\n;     (for [n idxed-nodes]\n;       (update n :children\n;               (fn [children]\n;                 (into [] (for [c children]\n;                            (assoc c :idx (get idxes-by-path\n;                                               (str (:tree-path n)\n;                                                    \"/\" (:name c)))))))))))\n; \n; (get-idxed-nodes (n/notes-by-category-to-children-tree\n;                     (n/organize-notes-by-category\n;                       n/example-notes #{\"a 1\" \"c\"})))\n\n(defn get-links\n  [all-subtrees]\n  (reduce concat\n    (for [subtree all-subtrees]\n      (into [] (for [child (:children subtree)]\n                 {:source (:idx child)\n                  :target (:idx subtree)\n                  :value 3})))))\n\n(defn get-category-links\n  [nodes categories-to-idx]\n  (reduce concat\n          (for [node nodes]\n            (into [] (for [category (:categories node)\n                           :let [idx (get categories-to-idx category)]\n                           :when idx]\n                       {:source (:idx node)\n                        :target idx\n                        :value 3})))))\n\n(defn update-nodes\n  [nodes & update-fns]\n  (into [] (for [n nodes]\n             ((apply comp update-fns) n))))\n\n(defn scale-size\n  [node]\n  (update node :size #(if (nil? %)\n                        20\n                        (Math/sqrt (/ % 10)))))\n\n(defn assign-group\n  [node]\n  (assoc node :group (cond\n                       (nil? (:children node)) 1\n                       (= 0 (count (:children node))) 2\n                       (<= 0 (count (:children node))) 3)))\n\n(defn strip-extension\n  [node]\n  (if (= \".\" (last (:name node)))\n    node\n    (-> node\n        (update :name #(first (split % #\"\\.\")))\n        (update :path #(replace (first (split % #\"\\.\"))\n                                #\"content/\" \"\"))\n        (update :tree-path #(first (split % #\"\\.\"))))))\n\n(defn fix-path\n  [node]\n  (update node :tree-path #(replace % #\"/home\" \"docs/\")))\n\n(defn capitalize-words \n  \"Capitalize every word in a string\"\n  [s]\n  (->> (split (str s) #\"\\b\") \n       (map capitalize)\n       (join)))\n\n(defn prettify-name\n  [node]\n  (update node :name #(-> %\n                         (replace #\"-\" \" \")\n                         (capitalize-words))))\n                       \n\n(defn page-tree-to-graph\n  [page-tree]\n  (let [all-subtrees (tree-seq associative? :children\n                               {:name \"home\"\n                                :children page-tree\n                                :idx 0})]\n    {:nodes (update-nodes all-subtrees\n                          prettify-name fix-path strip-extension scale-size\n                          assign-group)\n     :links (get-links all-subtrees)}))\n\n\n(tree-seq associative? :children\n          {:name \"home\"\n           :idx 0\n           :children \n           (let [categories #{\"a 1\" \"c\"}\n                 notes (map-indexed (fn [i n] (assoc n :idx (+ 1 i)))\n                                    n/example-notes)]\n             (n/notes-by-category-to-children-tree\n               (n/organize-notes-by-category notes categories)\n               (n/index-categories categories (count notes))))})\n\n(def page-graph-data-simple\n  (r/atom {:nodes [{:name \"Home\" :size 5 :id \"Home\"}\n                   {:name \"Mind\" :size 5 :id \"Mind\"}]\n           :links [{:source 0 :target 1 :value 2}]}))\n\n(def example-page-graph-data\n  (r/atom (page-tree-to-graph example-page-tree)))\n\n\n(defn ^:export page-graph\n  ([page-tree]\n   (page-graph page-tree #js {}))\n  ([page-tree options]\n   (let [page-graph-data (r/atom (page-tree-to-graph page-tree))]\n     (fn []\n       [:div\n         [g/viz (r/track g/prechew page-graph-data) \"https://kovasap.github.io/\"\n          (js->clj options :keywordize-keys true)]]))))\n\n\n(defn notes-to-graph\n  [notes selected-categories all-categories]\n  (let [categories-to-show (if (= 0 (count selected-categories))\n                              (set (keys all-categories))\n                              selected-categories)\n        idxed-notes (map-indexed (fn [i n] (assoc n :idx (+ 1 i)))\n                                 (n/get-notes-for-categories\n                                   notes selected-categories))\n        categories-to-idx (assoc (n/index-categories categories-to-show\n                                                     (+ 1 (count idxed-notes)))\n                                 \"Home\" 0)\n        category-to-node (fn [c] {:name c\n                                  :idx (get categories-to-idx c)\n                                  :path (str \"?\" c \"=true\")\n                                  :tree-path \"\"\n                                  ; hack for group coloring\n                                  :children [1 1]})]\n    {:nodes (update-nodes (concat \n                            [{:name \"home\" :idx 0 :children [1 1 1]}]\n                            idxed-notes\n                            (map category-to-node categories-to-show))\n                          prettify-name fix-path strip-extension scale-size\n                          assign-group)\n     :links (concat ; TODO make only links from organize-notes-by-category\n                    ; appear if the number of links is overwhelming\n                    (get-category-links idxed-notes categories-to-idx)\n                    ; All categories link to home\n                    ; TODO make only categories from organize-notes-by-category\n                    ; appear here\n                    (for [[_ i] categories-to-idx]\n                      {:source 0\n                       :target i\n                       :value 3}))}))\n\n; TODO make this component update when the url parameters change (e.g. from\n; make-index-menu).\n(defn ^:export page-graph-from-notes\n  ([notes] (page-graph-from-notes notes #js {}))\n  ([notes options]\n   (fn []\n     (let [all-categories  (get-url-param-selections\n                             (set (keys (n/filter-category-selections notes)))\n                             url-params)\n           page-graph-data (r/atom\n                             (notes-to-graph notes\n                                             (get-selected-vars all-categories)\n                                             all-categories))]\n       [:div\n        [g/viz\n         (r/track g/prechew page-graph-data)\n         \"https://kovasap.github.io/\"\n         (js->clj options :keywordize-keys true)]]))))\n                      \n"]}